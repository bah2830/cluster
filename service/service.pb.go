// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	NodeDetails
	NodeNetworkDetails
	GenericReply
	ExecutionResponse
	ExecutionRequest
	Empty
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeDetails struct {
	Version     string                `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Hostname    string                `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	ServicePort int32                 `protobuf:"varint,3,opt,name=service_port,json=servicePort" json:"service_port,omitempty"`
	Networks    []*NodeNetworkDetails `protobuf:"bytes,4,rep,name=networks" json:"networks,omitempty"`
}

func (m *NodeDetails) Reset()                    { *m = NodeDetails{} }
func (m *NodeDetails) String() string            { return proto.CompactTextString(m) }
func (*NodeDetails) ProtoMessage()               {}
func (*NodeDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeDetails) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NodeDetails) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NodeDetails) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *NodeDetails) GetNetworks() []*NodeNetworkDetails {
	if m != nil {
		return m.Networks
	}
	return nil
}

type NodeNetworkDetails struct {
	Interface  string `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
	IpAddress  string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *NodeNetworkDetails) Reset()                    { *m = NodeNetworkDetails{} }
func (m *NodeNetworkDetails) String() string            { return proto.CompactTextString(m) }
func (*NodeNetworkDetails) ProtoMessage()               {}
func (*NodeNetworkDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeNetworkDetails) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *NodeNetworkDetails) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *NodeNetworkDetails) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type GenericReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *GenericReply) Reset()                    { *m = GenericReply{} }
func (m *GenericReply) String() string            { return proto.CompactTextString(m) }
func (*GenericReply) ProtoMessage()               {}
func (*GenericReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GenericReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ExecutionResponse struct {
	Command    string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	StdOut     string `protobuf:"bytes,2,opt,name=std_out,json=stdOut" json:"std_out,omitempty"`
	StdErr     string `protobuf:"bytes,3,opt,name=std_err,json=stdErr" json:"std_err,omitempty"`
	Background bool   `protobuf:"varint,4,opt,name=background" json:"background,omitempty"`
}

func (m *ExecutionResponse) Reset()                    { *m = ExecutionResponse{} }
func (m *ExecutionResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecutionResponse) ProtoMessage()               {}
func (*ExecutionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExecutionResponse) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *ExecutionResponse) GetStdOut() string {
	if m != nil {
		return m.StdOut
	}
	return ""
}

func (m *ExecutionResponse) GetStdErr() string {
	if m != nil {
		return m.StdErr
	}
	return ""
}

func (m *ExecutionResponse) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

type ExecutionRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *ExecutionRequest) Reset()                    { *m = ExecutionRequest{} }
func (m *ExecutionRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionRequest) ProtoMessage()               {}
func (*ExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExecutionRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *ExecutionRequest) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*NodeDetails)(nil), "service.NodeDetails")
	proto.RegisterType((*NodeNetworkDetails)(nil), "service.NodeNetworkDetails")
	proto.RegisterType((*GenericReply)(nil), "service.GenericReply")
	proto.RegisterType((*ExecutionResponse)(nil), "service.ExecutionResponse")
	proto.RegisterType((*ExecutionRequest)(nil), "service.ExecutionRequest")
	proto.RegisterType((*Empty)(nil), "service.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	Checkin(ctx context.Context, in *NodeDetails, opts ...grpc.CallOption) (*GenericReply, error)
	ExecResponse(ctx context.Context, in *ExecutionResponse, opts ...grpc.CallOption) (*Empty, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Checkin(ctx context.Context, in *NodeDetails, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/service.Controller/Checkin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ExecResponse(ctx context.Context, in *ExecutionResponse, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/service.Controller/ExecResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	Checkin(context.Context, *NodeDetails) (*GenericReply, error)
	ExecResponse(context.Context, *ExecutionResponse) (*Empty, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Checkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Checkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Controller/Checkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Checkin(ctx, req.(*NodeDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ExecResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ExecResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Controller/ExecResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ExecResponse(ctx, req.(*ExecutionResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkin",
			Handler:    _Controller_Checkin_Handler,
		},
		{
			MethodName: "ExecResponse",
			Handler:    _Controller_ExecResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Client API for Node service

type NodeClient interface {
	Checkin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeDetails, error)
	Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (*ExecutionResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Checkin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeDetails, error) {
	out := new(NodeDetails)
	err := grpc.Invoke(ctx, "/service.Node/Checkin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (*ExecutionResponse, error) {
	out := new(ExecutionResponse)
	err := grpc.Invoke(ctx, "/service.Node/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Checkin(context.Context, *Empty) (*NodeDetails, error)
	Execute(context.Context, *ExecutionRequest) (*ExecutionResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Checkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Checkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Node/Checkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Checkin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Node/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Execute(ctx, req.(*ExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkin",
			Handler:    _Node_Checkin_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Node_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0xe3, 0x2f, 0x69, 0x9d, 0xdc, 0xe4, 0x43, 0x70, 0x05, 0xc2, 0x98, 0x7f, 0x61, 0x56,
	0x5e, 0x55, 0x22, 0x2c, 0x60, 0xc1, 0x06, 0x4a, 0x60, 0x57, 0x90, 0x5f, 0x20, 0x9a, 0x8e, 0x2f,
	0xed, 0x28, 0xf1, 0x8c, 0xb9, 0x33, 0x2e, 0xed, 0x02, 0xb1, 0xe1, 0x3d, 0x78, 0x55, 0x64, 0x67,
	0xec, 0x04, 0x5a, 0x75, 0x79, 0xee, 0x39, 0xf2, 0xf9, 0xe9, 0x8c, 0x0c, 0xff, 0x3b, 0xe2, 0x0b,
	0xad, 0xe8, 0xa8, 0x62, 0xeb, 0x2d, 0xc6, 0x41, 0x8a, 0xdf, 0x11, 0x4c, 0x4f, 0x6c, 0x41, 0x1f,
	0xc8, 0x4b, 0xbd, 0x71, 0x98, 0x40, 0x7c, 0x41, 0xec, 0xb4, 0x35, 0x49, 0x34, 0x8f, 0xb2, 0x49,
	0xde, 0x49, 0x4c, 0x61, 0x7c, 0x6e, 0x9d, 0x37, 0xb2, 0xa4, 0xe4, 0xbf, 0xd6, 0xea, 0x35, 0xbe,
	0x80, 0x59, 0xf8, 0xe0, 0xaa, 0xb2, 0xec, 0x93, 0xe1, 0x3c, 0xca, 0x0e, 0xf2, 0x69, 0xb8, 0x7d,
	0xb1, 0xec, 0xf1, 0x35, 0x8c, 0x0d, 0xf9, 0xef, 0x96, 0xd7, 0x2e, 0x19, 0xcd, 0x87, 0xd9, 0x74,
	0xf1, 0xf8, 0xa8, 0x63, 0x6a, 0x00, 0x4e, 0xb6, 0x66, 0xe0, 0xc8, 0xfb, 0xb0, 0x60, 0xc0, 0xeb,
	0x3e, 0x3e, 0x81, 0x89, 0x36, 0x9e, 0xf8, 0xab, 0x54, 0x14, 0x48, 0x77, 0x07, 0x7c, 0x0a, 0xa0,
	0xab, 0x95, 0x2c, 0x0a, 0x26, 0xe7, 0x02, 0xed, 0x44, 0x57, 0xef, 0xb6, 0x07, 0x7c, 0x0e, 0xd3,
	0x52, 0xaa, 0xde, 0x1f, 0xb6, 0x3e, 0x94, 0x52, 0x85, 0x80, 0xc8, 0x60, 0xf6, 0x89, 0x0c, 0xb1,
	0x56, 0x39, 0x55, 0x9b, 0xab, 0x66, 0x95, 0x92, 0x9c, 0x93, 0x67, 0x5d, 0x57, 0x27, 0xc5, 0x4f,
	0xb8, 0xb7, 0xbc, 0x24, 0x55, 0x7b, 0x6d, 0x4d, 0x4e, 0xae, 0xb2, 0xc6, 0x51, 0x13, 0x57, 0xb6,
	0x2c, 0xa5, 0x29, 0xba, 0x78, 0x90, 0xf8, 0x10, 0x62, 0xe7, 0x8b, 0x95, 0xad, 0x7d, 0xa0, 0x3a,
	0x74, 0xbe, 0xf8, 0x5c, 0xfb, 0xce, 0x20, 0xe6, 0x80, 0xd3, 0x18, 0x4b, 0x66, 0x7c, 0x06, 0x70,
	0x2a, 0xd5, 0xfa, 0x8c, 0x6d, 0x6d, 0x8a, 0x64, 0x34, 0x8f, 0xb2, 0x71, 0xbe, 0x77, 0x11, 0x1f,
	0xe1, 0xee, 0x1e, 0xc0, 0xb7, 0x9a, 0x9c, 0xbf, 0xa5, 0xbf, 0x75, 0x8c, 0xa7, 0xcb, 0xae, 0xbf,
	0x93, 0x22, 0x86, 0x83, 0x65, 0x59, 0xf9, 0xab, 0xc5, 0xaf, 0x08, 0xe0, 0xd8, 0x1a, 0xcf, 0x76,
	0xb3, 0x21, 0xc6, 0x37, 0x10, 0x1f, 0x9f, 0x93, 0x5a, 0x6b, 0x83, 0xf7, 0xff, 0x7a, 0xb0, 0xf0,
	0x12, 0xe9, 0x83, 0xfe, 0xba, 0x3f, 0x99, 0x18, 0xe0, 0x5b, 0x98, 0x35, 0x64, 0xfd, 0x2a, 0x69,
	0x1f, 0xbc, 0xb6, 0x58, 0x7a, 0x67, 0xe7, 0x35, 0x10, 0x62, 0xb0, 0xf8, 0x01, 0xa3, 0xa6, 0x05,
	0x5f, 0xee, 0xfa, 0xff, 0x09, 0xa5, 0x37, 0xf2, 0x88, 0x01, 0xbe, 0x87, 0x78, 0xdb, 0x40, 0xf8,
	0xe8, 0xa6, 0xce, 0x76, 0xa4, 0xf4, 0x16, 0x1c, 0x31, 0x38, 0x3d, 0x6c, 0xff, 0x93, 0x57, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xa1, 0xbe, 0x1d, 0x38, 0x03, 0x00, 0x00,
}
